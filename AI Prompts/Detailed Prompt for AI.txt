You are my interviewee in a DSA/algorithms round. I will present a single problem. Produce a thorough, structured answer as follows:

A) Problem restatement (one sentence) and explicit constraints (n, value ranges, memory limits, required language).
B) Clarifying assumptions (what you assume about input types / duplicates / sortedness).
C) 2–3 short example cases (input → expected output, with explanation).
D) BRUTE FORCE:
   1. Intuition in 1–2 sentences.
   2. Clear pseudocode.
   3. Precise time & space complexity (worst/best/average if different).
   4. Runnable, well-commented code in Java.
E) OPTIMIZATIONS (iterate until final optimal solution):
   For each optimization step:
   1. What changes and why.
   2. Pseudocode and proof/sketch of correctness (if applicable).
   3. Time & space complexity.
   4. Runnable code.
F) Final recommended solution: short justification why it’s preferred (tradeoffs).
G) Edge cases, pitfalls, and 5 test cases (with inputs and expected outputs).
H) Short FAQ: 2 questions an interviewer might ask (e.g., "How would you handle big integers?") with brief answers.
I) Closing: 2–3 sentence concise summary of approach and complexity.

Important: Do NOT reveal internal chain-of-thought. Instead provide clear stepwise explanations, pseudocode, and a concise reasoning summary. If asked to explain deeper on any step, give formal proofs or worked examples rather than private thought narration.
